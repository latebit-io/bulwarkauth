name: Release with GoReleaser

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

permissions:
  contents: write  # For creating releases
  packages: write  # For pushing to GitHub Container Registry
  issues: write    # For creating and updating issues

jobs:
  # First job to run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Run tests
        run: go test -p 1 ./...

  # Second job to determine the next version
  semver:
    name: Calculate Semantic Version
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semantic-version.outputs.version }}
      new_tag: ${{ steps.semantic-version.outputs.version_tag }}
      should_release: ${{ steps.release-check.outputs.should_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Semantic versioning
        id: semantic-version
        uses: PaulHatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          patch_pattern: "fix:"
          format: "${major}.${minor}.${patch}"
          bump_each_commit: false
          search_commit_body: true

      - name: Check if this is a release
        id: release-check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug version info
        run: |
          echo "New version: ${{ steps.semantic-version.outputs.version }}"
          echo "New tag: v${{ steps.semantic-version.outputs.version }}"
          echo "Should release: ${{ steps.release-check.outputs.should_release }}"

  create-tag:
    name: Create Git Tag
    needs: semver
    if: needs.semver.outputs.should_release == 'true' && github.ref_type != 'tag'
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag-info.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub tag
        id: create-tag
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = 'v${{ needs.semver.outputs.new_version }}';
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              console.log(`Created tag: ${tagName}`);
              return tagName;
            } catch (error) {
              console.log(`Failed to create tag: ${error.message}`);
              return '';
            }

      - name: Set tag info
        id: tag-info
        run: |
          echo "tag_name=v${{ needs.semver.outputs.new_version }}" >> $GITHUB_OUTPUT


  # Second job to build and publish with GoReleaser
  release:
    name: Release with GoReleaser
    needs: [semver, create-tag]
    if: needs.semver.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release tag
        if: github.ref_type != 'tag'
        run: |
          echo "RELEASE_TAG=v${{ needs.semver.outputs.new_version }}" >> $GITHUB_ENV

      - name: Use existing tag
        if: github.ref_type == 'tag'
        run: |
          echo "RELEASE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Debug GitHub context
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_type: ${{ github.ref_type }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "startsWith condition: ${{ startsWith(github.ref, 'refs/tags/v') }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.event.ref: ${{ github.event.ref }}"

      - name: Run GoReleaser (release)
#        if: startsWith(github.ref, 'refs/tags/v')
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.RELEASE_TAG }}

#      - name: Run GoReleaser (snapshot)
#        if: "!startsWith(github.ref, 'refs/tags/v')"
#        uses: goreleaser/goreleaser-action@v5
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release --snapshot --clean
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          GORELEASER_CURRENT_TAG: ${{ env.RELEASE_TAG }}