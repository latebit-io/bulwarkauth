// Code generated by mockery v2.53.3. DO NOT EDIT.

package accounts

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEmailService is an autogenerated mock type for the EmailService type
type MockEmailService struct {
	mock.Mock
}

type MockEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailService) EXPECT() *MockEmailService_Expecter {
	return &MockEmailService_Expecter{mock: &_m.Mock}
}

// SendForgotPasswordEmail provides a mock function with given fields: ctx, email, forgotToken
func (_m *MockEmailService) SendForgotPasswordEmail(ctx context.Context, email string, forgotToken string) error {
	ret := _m.Called(ctx, email, forgotToken)

	if len(ret) == 0 {
		panic("no return value specified for SendForgotPasswordEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, forgotToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailService_SendForgotPasswordEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendForgotPasswordEmail'
type MockEmailService_SendForgotPasswordEmail_Call struct {
	*mock.Call
}

// SendForgotPasswordEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - forgotToken string
func (_e *MockEmailService_Expecter) SendForgotPasswordEmail(ctx interface{}, email interface{}, forgotToken interface{}) *MockEmailService_SendForgotPasswordEmail_Call {
	return &MockEmailService_SendForgotPasswordEmail_Call{Call: _e.mock.On("SendForgotPasswordEmail", ctx, email, forgotToken)}
}

func (_c *MockEmailService_SendForgotPasswordEmail_Call) Run(run func(ctx context.Context, email string, forgotToken string)) *MockEmailService_SendForgotPasswordEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEmailService_SendForgotPasswordEmail_Call) Return(_a0 error) *MockEmailService_SendForgotPasswordEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailService_SendForgotPasswordEmail_Call) RunAndReturn(run func(context.Context, string, string) error) *MockEmailService_SendForgotPasswordEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendMagicLinkEmail provides a mock function with given fields: ctx, email, code
func (_m *MockEmailService) SendMagicLinkEmail(ctx context.Context, email string, code string) error {
	ret := _m.Called(ctx, email, code)

	if len(ret) == 0 {
		panic("no return value specified for SendMagicLinkEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailService_SendMagicLinkEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMagicLinkEmail'
type MockEmailService_SendMagicLinkEmail_Call struct {
	*mock.Call
}

// SendMagicLinkEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - code string
func (_e *MockEmailService_Expecter) SendMagicLinkEmail(ctx interface{}, email interface{}, code interface{}) *MockEmailService_SendMagicLinkEmail_Call {
	return &MockEmailService_SendMagicLinkEmail_Call{Call: _e.mock.On("SendMagicLinkEmail", ctx, email, code)}
}

func (_c *MockEmailService_SendMagicLinkEmail_Call) Run(run func(ctx context.Context, email string, code string)) *MockEmailService_SendMagicLinkEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEmailService_SendMagicLinkEmail_Call) Return(_a0 error) *MockEmailService_SendMagicLinkEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailService_SendMagicLinkEmail_Call) RunAndReturn(run func(context.Context, string, string) error) *MockEmailService_SendMagicLinkEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerificationEmail provides a mock function with given fields: ctx, email, verificationToken
func (_m *MockEmailService) SendVerificationEmail(ctx context.Context, email string, verificationToken string) error {
	ret := _m.Called(ctx, email, verificationToken)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, verificationToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailService_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type MockEmailService_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - verificationToken string
func (_e *MockEmailService_Expecter) SendVerificationEmail(ctx interface{}, email interface{}, verificationToken interface{}) *MockEmailService_SendVerificationEmail_Call {
	return &MockEmailService_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", ctx, email, verificationToken)}
}

func (_c *MockEmailService_SendVerificationEmail_Call) Run(run func(ctx context.Context, email string, verificationToken string)) *MockEmailService_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEmailService_SendVerificationEmail_Call) Return(_a0 error) *MockEmailService_SendVerificationEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailService_SendVerificationEmail_Call) RunAndReturn(run func(context.Context, string, string) error) *MockEmailService_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailService creates a new instance of MockEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailService {
	mock := &MockEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
